# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

user root;
worker_processes auto;
pid /run/nginx.pid;

# Allow many connections and access to files.
worker_rlimit_nofile 65535;

# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

http {
    access_log  /var/log/nginx/access.log;
    error_log   /var/log/nginx/error.log;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 4096;
    server_tokens       off;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    include /etc/nginx/conf.d/*.conf;

    lua_package_path "/etc/nginx/conf.d/lib/?.lua;;";


    server {
        listen       8088;
        server_name  _;

        include /etc/nginx/default.d/*.conf;


        set $vector_port 8685;
        set $flag "P";

        if ($request_method = POST ) {
            set $flag "P";
        }

        if ($request_method = GET ) {
            set $flag "G";
        }

        if ($request_uri ~* "sync=1") {
           set $flag "${flag}1";
        }

        if ($request_uri !~* "sync=1") {
           set $flag "${flag}0";
        }

        if ($flag = "P0") {
           # POST and sync=0
           set $vector_port 8685;
        }

        if ($flag = "P1") {
           # POST and sync=1
           set $vector_port 8695;
        }

        if ($flag = "G0") {
           # GET and sync=0
           set $vector_port 8684;
        }

        if ($flag = "G1") {
           # GET and sync=1
           set $vector_port 8694;
        }

        if ($request_uri ~* "/debug") {
            set $vector_port 8687;
        }

        location /test {
            access_log off;
            proxy_pass http://127.0.0.1:8088/vector?path=$uri&$query_string;  
        }

        location /debug {
            access_log on;
            proxy_pass http://127.0.0.1:8088/vector?path=$uri&$query_string;   
        }

        location = /vector {
            access_log off;
            add_header Content-Type text/plain;

            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
            add_header 'X_REQ_ID' $request_id;
            add_header 'X_VECTOR_PORT' $vector_port;

            # proxy_set_header 'X_URI'        $request_uri;
            # proxy_set_header 'X_UA'         $http_user_agent;
            # proxy_set_header 'X_IP'         $http_x_forwarded_for;
            # proxy_set_header 'X_DATE'       $time_iso8601;
            # proxy_set_header 'X_REQ_ID'     $request_id;
            # proxy_set_header 'X_METHOD'     $request_method;
            # proxy_set_header 'X_EVENT_TYPE' $http_x_event_type;

            #proxy_pass http://127.0.0.1:$vector_port;   
            #return 200 "{ $request_uri, $vector_port }";
            
            #https://github.com/ledgetech/lua-resty-http
            content_by_lua '
                
                ngx.req.read_body()
                local request_body = ngx.req.get_body_data() 
                local httpc = require("resty.http").new()

                local res, err = httpc:request_uri("http://127.0.0.1:" .. "8088" .. "/health_debug", {
                   method = ngx.var.request_method,
                   body = request_body,
                   headers = {
                       ["Content-Type"] = "text/plain",
                       ["X_URI"] = ngx.var.request_uri,
                       ["X_UA"] =  ngx.var.http_user_agent,
                       ["X_IP"] = ngx.var.http_x_forwarded_for,
                       ["X_DATE"] =  ngx.var.time_iso8601,
                       ["X_REQ_ID"] = ngx.var.request_id,
                       ["X_METHOD"] =  ngx.var.request_method,                       
                       ["X_EVENT_TYPE"] =  ngx.var.http_x_event_type,
                   },
                })

                local status = res.status
                local length = res.headers["Content-Length"]
                local body   = res.body

                if res and res.status == ngx.HTTP_OK then
                    ngx.say(ngx.var.request_uri)
                    ngx.say(ngx.var.query_string)
                    ngx.say(ngx.var.http_user_agent)
                    ngx.say(ngx.var.http_x_forwarded_for)
                    ngx.say(ngx.var.time_iso8601)
                    ngx.say(ngx.var.request_id)
                    ngx.say(ngx.var.request_method)
                    ngx.say(ngx.var.http_x_event_type)
                    ngx.say(ngx.var.vector_port)
                    ngx.say("res.body:", body)
                    ngx.say("req.status:", res.status)
                    ngx.say("req.body:", request_body)
                    ngx.say("length:", length)
                else
                    ngx.log(ngx.ERR, res.status)
                    ngx.exit(res.status)
                end
            ';

            #proxy_pass http://127.0.0.1:8088/health_debug;
        }

        location /health_debug {
            return 200 "{'health': 'OK'}";
        }
    }
}

